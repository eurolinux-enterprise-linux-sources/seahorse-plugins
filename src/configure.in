dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.52)

dnl ****************************************************************************
dnl MAIN SEAHORSE VERSION (update after release)

AC_INIT(seahorse-plugins, 2.28.1)

dnl ****************************************************************************

AC_CONFIG_SRCDIR(libseahorse/seahorse-util.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE
AC_CONFIG_MACRO_DIR([m4])

AC_PROG_INTLTOOL([0.35.0])
AM_PROG_LIBTOOL
AC_PROG_CXX
AM_GCONF_SOURCE_2
GNOME_DOC_INIT

dnl Get the off_t size right
AC_SYS_LARGEFILE
AC_TYPE_OFF_T
AC_FUNC_FSEEKO

AC_CHECK_FUNCS(setresuid setresgid)
AC_CHECK_FUNCS(strsep)

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

PKG_CHECK_MODULES(SEAHORSE, libglade-2.0 gconf-2.0 gtk+-2.0 >= 2.10.0 gio-2.0)

AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-cygwin*|*-*-mingw*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = "yes")

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    os_win32=yes
    ;;
  *)
    os_win32=no
    ;;
esac
AC_MSG_RESULT([$os_win32])
AM_CONDITIONAL(OS_WIN32, test "$os_win32" = "yes")

if test "$platform_win32" = "yes" ; then
	PLUGIN_LIBTOOL_FLAGS="-module -avoid-version -no-undefined"
else
	PLUGIN_LIBTOOL_FLAGS="-module -avoid-version"
fi
AC_SUBST(PLUGIN_LIBTOOL_FLAGS)

dnl *********************
dnl Accepted GPG versions
dnl *********************
AC_ARG_ENABLE(gpg-check, 
	AC_HELP_STRING([--disable-gpg-check], [check GPG version (default is yes)]),
	DO_CHECK=$enableval, DO_CHECK=yes)
	
if test	"$DO_CHECK" = "yes"; then
  accepted_versions="1.2 1.4 2.0"
  AC_PATH_PROG(GNUPG, gpg, no)
  ok="no"
  if test "$GNUPG" != "no"; then
    AC_MSG_CHECKING(for appropriate GnuPG version)
    gnupg_version=`$GNUPG --version | grep gpg`
    major=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
    minor=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
    micro=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`
    
    for ver in $accepted_versions; do
      if test "$ver" = "$major.$minor"; then
        AC_DEFINE_UNQUOTED(GPG_MAJOR, [$major], [GPG Major Version])
        AC_DEFINE_UNQUOTED(GPG_MINOR, [$minor], [GPG Minor Version])
        ok="yes"
        break
      fi
    done
    
  fi
  
  if test "$ok" = "yes"; then
	AC_MSG_RESULT([yes])
  else
	AC_MSG_ERROR([Appropriate version of GnuPG not found. Please install one of versions: $accepted_versions])
  fi

fi


dnl **********
dnl GPGME
dnl **********

ok="no"
min_gpgme_version=1.0.0
AC_PATH_PROG(GPGME_CONFIG, gpgme-config, "failed")
if test $GPGME_CONFIG != "failed" ; then
      AC_MSG_CHECKING(for GPGME - version >= $min_gpgme_version)
      req_major=`echo $min_gpgme_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/'`
      req_minor=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/'`
      req_micro=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/'`
      gpgme_config_version=`$GPGME_CONFIG --version`
      major=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
      minor=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
      micro=`echo $gpgme_config_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`

	if test "$major" -eq "$req_major"; then
	   if test "$minor" -ge "$req_minor"; then
	     if test "$micro" -ge "$req_micro"; then
	       ok="yes"
	     fi
	   fi
	fi
fi

if test $ok = "yes"; then
  GPGME_CFLAGS=`$GPGME_CONFIG --cflags`
  GPGME_LIBS=`$GPGME_CONFIG --libs`
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR(GPGME $min_gpgme_version or later needed)
fi

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $GPGME_CFLAGS -O0"
SEAHORSE_LIBS="$SEAHORSE_LIBS $GPGME_LIBS"


dnl ***************
dnl NAUTILUS
dnl ***************

# Allow nautilus plugin to be disabled
AC_ARG_ENABLE(nautilus, 
	    AC_HELP_STRING([--disable-nautilus],
	    [Don't compile nautilus plugin]))

with_nautilus_ext=no

# Nautilus tests 
if test "$enable_nautilus" = "no"; then
    echo "disabling nautilus plugin"
else
    enable_nautilus=yes
    echo "enabling nautilus plugin..."
    echo "checking for supported versions of nautilus..."

    PKG_CHECK_MODULES(NAUTILUS, [libnautilus-extension >= 2.12.0 glib-2.0 >= 2.10.0],
                      [enable_nautilus=yes],[enable_nautilus=no])

    # The new Nautilus extension
    if test "$enable_nautilus" = "yes"; then
        with_nautilus_ext=yes
        AC_SUBST(NAUTILUS_CFLAGS)
        AC_SUBST(NAUTILUS_LIBS)
    fi

	dnl   We have this --with-nautils-ext-dir option primarily so it 
	dnl   can work with DISTCHECK_CONFIGURE_FLAGS in Makefile.am
	dnl   and get around autotools limitations.
	 
    AC_ARG_WITH([nautilus-ext-dir],
                [AC_HELP_STRING([--with-nautilus-ext-dir=DIR],
                                [directory to nautilus extension config])],
                [], [with_nautilus_ext_dir=""])

    # Fetch the extension directory
    if test "$enable_nautilus" = "yes"; then
        if test -z "$with_nautilus_ext_dir"; then
            NAUTILUS_EXTENSION_DIR=`$PKG_CONFIG --variable=extensiondir libnautilus-extension`
        else
            NAUTILUS_EXTENSION_DIR="$with_nautilus_ext_dir"
        fi
        AC_SUBST(NAUTILUS_EXTENSION_DIR)
    fi
fi

AM_CONDITIONAL(WITH_NAUTILUS_EXT, test "$with_nautilus_ext" = "yes")


dnl ****************************************************************************
dnl AGENT
dnl ****************************************************************************

# Allow agent to be disabled
AC_ARG_ENABLE(agent, 
        AC_HELP_STRING([--disable-agent],
        [Don't compile agent for passphrase caching]))

if test "$enable_agent" = "no"; then
    echo "disabling password caching agent"
else

    enable_agent=yes
    echo "enabling password caching agent"
    
    AC_DEFINE_UNQUOTED(WITH_AGENT, 1, [Compile password caching 'agent' code])
    
    AC_SUBST([AGENT_CFLAGS])
    AC_SUBST([AGENT_LIBS])
    
fi

AM_CONDITIONAL(WITH_AGENT, test "$enable_agent" != "no")


dnl ****************************************************************************
dnl GNOME-KEYRING
dnl ****************************************************************************

PKG_CHECK_MODULES([GNOME_KEYRING], [gnome-keyring-1],
                  [enable_gnome_keyring=yes],[enable_gnome_keyring=no])

if test "$enable_gnome_keyring" = "no"; then
    AC_MSG_ERROR([gnome-keyring library or headers not found.])
fi

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $GNOME_KEYRING_CFLAGS"
SEAHORSE_LIBS="$SEAHORSE_LIBS $GNOME_KEYRING_LIBS"
        
dnl ****************************************************************************
dnl DBUS
dnl ****************************************************************************

DBUS_GLIB_REQUIRED=0.35

PKG_CHECK_MODULES([DBUS], [dbus-glib-1 >= $DBUS_GLIB_REQUIRED], [enable_dbus=yes],[enable_dbus=no])
if test "$enable_dbus" = "no"; then
    AC_MSG_ERROR([dbus or dbus-glib-1 bindings not found.])
fi

AC_SUBST([DBUS_CFLAGS])
AC_SUBST([DBUS_LIBS])

AC_PATH_PROG([DBUS_BINDING_TOOL], [dbus-binding-tool], [no])
if test x$DBUS_BINDING_TOOL = "xno" ; then
    AC_MSG_ERROR([dbus-binding-tool executable not found in your path - should be installed with dbus glib bindings])
fi

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $DBUS_CFLAGS"
SEAHORSE_LIBS="$SEAHORSE_LIBS $DBUS_LIBS"

dnl ****************************************************************************
dnl LIBCRYPTUI
dnl ****************************************************************************

PKG_CHECK_MODULES([LIBCRYPTUI], cryptui-0.0, [enable_cryptui=yes],[enable_cryptui=no])
if test "$enable_cryptui" = "no"; then
    AC_MSG_ERROR([libcryptui from seahorse not found.])
fi

AC_SUBST([LIBCRYPTUI_CFLAGS])
AC_SUBST([LIBCRYPTUI_LIBS])

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $LIBCRYPTUI_CFLAGS"
SEAHORSE_LIBS="$SEAHORSE_LIBS $LIBCRYPTUI_LIBS"
   
dnl ****************************************************************************
dnl EPIPHANY
dnl ****************************************************************************

with_epiphany_plugin="no"

EPIPHANY_REQUIRED=2.24.0
EPIPHANY_LIBXML_REQUIRED=2.6.0
EPIPHANY_LIBGLIB_REQUIRED=2.10.0
EPIPHANY_LIBGTK_REQUIRED=2.8.0

AC_SUBST([EPIPHANY_REQUIRED])
AC_SUBST([EPIPHANY_LIBXML_REQUIRED])
AC_SUBST([EPIPHANY_LIBGLIB_REQUIRED])
AC_SUBST([EPIPHANY_LIBGTK_REQUIRED])

if test "$enable_dbus" != "yes"; then
    echo "disabling epiphany plugin: no dbus support"
    AC_DEFINE([HAVE_MOZILLA_TOOLKIT],[0],[Define if mozilla is of the toolkit flavour])
    AM_CONDITIONAL([HAVE_MOZILLA_TOOLKIT],[test 0])
    AM_CONDITIONAL([HAVE_GECKO_DEBUG],[test 0])
    AM_CONDITIONAL([HAVE_GECKO_1_7],[test 0])
    AM_CONDITIONAL([HAVE_GECKO_1_8],[test 0])
    AM_CONDITIONAL([HAVE_GECKO_1_8_1],[test 0])
    AM_CONDITIONAL([HAVE_GECKO_1_9],[test 0])
else
    # Allow epiphany plugin to be disabled
    AC_ARG_ENABLE(epiphany, 
            AC_HELP_STRING([--disable-epiphany],
            [Don't enable the epiphany plugin]))
            
    # Epiphany tests 
    if test "$enable_epiphany" = "no"; then
        echo "disabling epiphany plugin"
        AC_DEFINE([HAVE_MOZILLA_TOOLKIT],[0],[Define if mozilla is of the toolkit flavour])
        AM_CONDITIONAL([HAVE_MOZILLA_TOOLKIT],[test 0])
        AM_CONDITIONAL([HAVE_GECKO_DEBUG],[test 0])
        AM_CONDITIONAL([HAVE_GECKO_1_7],[test 0])
        AM_CONDITIONAL([HAVE_GECKO_1_8],[test 0])
        AM_CONDITIONAL([HAVE_GECKO_1_8_1],[test 0])
        AM_CONDITIONAL([HAVE_GECKO_1_9],[test 0])
    else
        enable_epiphany=yes
        echo "enabling epiphany plugin..."       
        
        GECKO_INIT([MOZILLA],[with_epiphany_plugin=yes],[with_epiphany_plugin=no])
        
        if test "$with_epiphany_plugin" = "yes"; then
            AC_SUBST([MOZILLA])
            AC_SUBST([MOZILLA_FLAVOUR])
            AC_SUBST([MOZILLA_HOME])
            AC_SUBST([MOZILLA_PREFIX])
            AC_SUBST([MOZILLA_INCLUDE_ROOT])

            case "$MOZILLA" in
            libxul-unstable) min_version=1.9 ;;
            xulrunner) min_version=1.8 ;;
            *firefox) min_version=1.5 ;;
            *) echo "Unsupported gecko $gecko_cv_gecko" ;;
            esac

AC_MSG_CHECKING([for Epiphany API version])
apis="2.26 2.25 2.24"
epiphany_api_version=
for api in $apis; do
 PKG_CHECK_EXISTS([epiphany-$api],[epiphany_api_version=$api; break],[])
done
AC_MSG_RESULT([$epiphany_api_version])

if test -z "$epiphany_api_version"; then
 echo "epiphany not found"
fi
             
    PKG_CHECK_MODULES([EPIPHANY_DEPENDENCY], [\
            		  libxml-2.0 >= $EPIPHANY_LIBXML_REQUIRED \
            		  libglade-2.0 \
            		  glib-2.0 >= $EPIPHANY_LIBGLIB_REQUIRED \
            		  gmodule-2.0 \
            		  gtk+-2.0 >= $EPIPHANY_LIBGTK_REQUIRED \
            		  epiphany-$epiphany_api_version >= $EPIPHANY_REQUIRED],
            		  [with_epiphany_plugin=yes E_API_VERSION=$epiphany_api_version],
            		  [with_epiphany_plugin=no; echo "no"; echo "disabling epiphany plugin"])
        else
            echo "disabling epiphany plugin"
        fi
        
        if test "$with_epiphany_plugin" = "yes"; then
	    if test $gecko_cv_gecko = libxul-unstable; then
            PKG_CHECK_MODULES([MOZILLA_COMPONENT],
            		          [${gecko_cv_gecko} >= $min_version $gecko_cv_extra_pkg_dependencies],
            		          [with_epiphany_plugin=yes],[with_epiphany_plugin=no echo "disabling epiphany plugin"])
	    else
            PKG_CHECK_MODULES([MOZILLA_COMPONENT],
            		          [${gecko_cv_gecko}-xpcom >= $min_version $gecko_cv_extra_pkg_dependencies],
            		          [with_epiphany_plugin=yes],[with_epiphany_plugin=no echo "disabling epiphany plugin"])
	    fi
        fi
        		          
        if test "$with_epiphany_plugin" = "yes"; then
            echo "enabling epiphany plugin"
            
            EPIPHANY_EXTENSION_INIT([$E_API_VERSION], [$EPIPHANY_REQUIRED])
            AC_SUBST([E_API_VERSION])

            AC_ARG_WITH([epiphany-ext-dir],
                        [AC_HELP_STRING([--with-epiphany-ext-dir=DIR],
                        [directory to epiphany extension config])],
                        [], [with_epiphany_ext_dir=""])

            # This is used by 'make distcheck'. See Makefile.am
            if test -z "$with_nautilus_ext_dir"; then
                EPIPHANY_EXTENSIONS_DIR=$(pkg-config --variable=extensionsdir epiphany-$E_API_VERSION)
            else
                EPIPHANY_EXTENSIONS_DIR="$with_epiphany_ext_dir"
            fi
            AC_SUBST([EPIPHANY_EXTENSIONS_DIR])

            AC_SUBST([EPIPHANY_DEPENDENCY_CFLAGS])
            AC_SUBST([EPIPHANY_DEPENDENCY_LIBS])
            AC_SUBST([MOZILLA_COMPONENT_CFLAGS])
            AC_SUBST([MOZILLA_COMPONENT_LIBS])
        fi
    fi
fi

AM_CONDITIONAL(WITH_EPIPHANY, test "$with_epiphany_plugin" = "yes")

dnl ****************************************************************************
dnl GEDIT
dnl ****************************************************************************

with_gedit_plugin="no"
with_gedit_bonobo="no"

if test "$enable_dbus" != "yes"; then
    echo "disabling gedit plugin: no dbus support"
    
else

    # Allow gedit plugin to be disabled
    AC_ARG_ENABLE(gedit, 
            AC_HELP_STRING([--disable-gedit],
            [Don't compile gedit plugin]))

    # Gedit tests 
    if test "$enable_gedit" = "no"; then
        echo "disabling gedit plugin"
    else
        enable_gedit=yes
        echo "enabling gedit plugin..."
        echo "checking for supported versions of gedit..."
    
        # Gedit plugins completely changed after 2.14. 
        # - Bonobo plugins <= 2.12. 
        # - Glib type plugins > 2.13
    
    PKG_CHECK_MODULES(GEDIT, gedit-2.20 >= 2.20.0, [with_gedit_plugin=yes],
    	[PKG_CHECK_MODULES(GEDIT, gedit-2.16 >= 2.15.0, [with_gedit_plugin=yes],
                [PKG_CHECK_MODULES(GEDIT, gedit-2.14 >= 2.13.0, [with_gedit_plugin=yes],
                    [PKG_CHECK_MODULES(GEDIT, gedit-2.12 >= 2.12.0, [with_gedit_bonobo=yes],
                        [PKG_CHECK_MODULES(GEDIT, gedit-2.10 >= 2.9.0, [with_gedit_bonobo=yes], 
                            [PKG_CHECK_MODULES(GEDIT, gedit-2.8 >= 2.8.0, [with_gedit_bonobo=yes], 
                                [PKG_CHECK_MODULES(GEDIT, gedit-2.6 >= 2.6.0, [with_gedit_bonobo=yes],
                                    [enable_gedit=no])])])])])])])
    
        if test "$enable_gedit" = "yes"; then
            echo "enabling gedit plugin..."
            
            if test "$with_gedit_bonobo" = "yes"; then
                echo "using bonobo type gedit plugin..."
                AC_DEFINE_UNQUOTED(WITH_GEDIT_BONOBO, 1, [Use 'bonobo' type gedit plugin (for versions <= 2.12)])
            else
                echo "using glib type gedit plugin..."
            fi
        
            AC_SUBST(GEDIT_CFLAGS)
            AC_SUBST(GEDIT_LIBS)
        fi
    fi
fi

AM_CONDITIONAL(WITH_GEDIT, test "$enable_gedit" = "yes")
AM_CONDITIONAL(WITH_GEDIT_BONOBO, test "$with_gedit_bonobo" = "yes")

dnl ***************
dnl APPLET
dnl ***************

PANEL_APPLET_REQUIRED=2.9.4

with_panel_applet="no"

if test "$enable_dbus" != "yes"; then
    echo "disabling panel applet: no dbus support"
    
else

    # Allow applet to be disabled
    AC_ARG_ENABLE(applet, 
            AC_HELP_STRING([--disable-applet],
            [Don't compile clipboard encryption panel applet]))

    # Applet tests 
    if test "$enable_applet" = "no"; then
        echo "disabling panel applet"
    else
        echo "checking for supported versions of libpanelapplet..."
        
        PKG_CHECK_MODULES(GNOME_APPLETS, libpanelapplet-2.0 >= $PANEL_APPLET_REQUIRED,
                [enable_applet=yes],
                [enable_applet=no])

        if test "$enable_applet" = "yes"; then
            echo "enabling panel applet..."
            AC_SUBST(GNOME_APPLETS_CFLAGS)
            AC_SUBST(GNOME_APPLETS_LIBS)
            AC_DEFINE(WITH_APPLET, 1, [Build the clipboard encryption panel applet])
            with_panel_applet=yes
        fi
    fi
fi

AM_CONDITIONAL(WITH_APPLET, test "$enable_applet" = "yes")
   
dnl *******************
dnl LIBNOTIFY
dnl *******************

LIBNOTIFY_REQUIRED=0.3

# Allow libnotify to be disabled
AC_ARG_ENABLE(libnotify, 
        AC_HELP_STRING([--disable-libnotify],
        [Don't compile in libnotify support]))   
        
if test "x$enable_libnotify" = "xno"; then
    echo "disabling libnotify support"
else

    PKG_CHECK_MODULES(LIBNOTIFY, [libnotify >= $LIBNOTIFY_REQUIRED], 
                      enable_libnotify=yes, enable_libnotify=no)
    if test "$enable_libnotify" = "yes"; then
        
        AC_DEFINE(HAVE_LIBNOTIFY, 1, [libnotify available])
        
        SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $LIBNOTIFY_CFLAGS"
        SEAHORSE_LIBS="$SEAHORSE_LIBS $LIBNOTIFY_LIBS"
    fi
fi

dnl ==============================================
dnl libebook
dnl ==============================================

PKG_CHECK_MODULES(LIBEBOOK, [libebook-1.2 >= 1.7.90], [enable_ebook=yes],[enable_ebook=no])

AC_SUBST([EBOOK_CFLAGS])
AC_SUBST([EBOOK_LIBS])

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $EBOOK_CFLAGS"
SEAHORSE_LIBS="$SEAHORSE_LIBS $EBOOK_LIBS"

AM_CONDITIONAL(WITH_EBOOK, test "$enable_ebook" = "yes") 

dnl ****************************************************************************

# Debug mode
AC_ARG_ENABLE(debug, 
	    AC_HELP_STRING([--enable-debug],
	    [Compile binaries in debug mode]))

if test "$enable_debug" = "yes"; then
  CFLAGS="$CFLAGS -g -O0 -DBONOBO_DISABLE_DEPRECATED -DG_DISABLE_DEPRECATED -Wall -Werror"
  AC_DEFINE_UNQUOTED(_DEBUG, 1, [In debug mode])
  echo "enabling debug compile mode"
else 
  dnl AC_DEFINE_UNQUOTED(G_DISABLE_ASSERT, 1, [Disable glib assertions])
  echo "disabling debug compile mode"
fi

# Fatal Messages mode
AC_ARG_ENABLE(fatal-messages, 
	    AC_HELP_STRING([--enable-fatal-messages],
	    [Don't make compile and or runtime messages fatal in debug mode.]))

if test "$enable_fatal_messages" = "yes" && test "$enable_debug" = "yes"; then
    CFLAGS="$CFLAGS -Werror"
    AC_DEFINE_UNQUOTED(FATAL_MESSAGES, 1, [Fatal runtime messages])
    echo "enabling fatal runtime messages"
fi

# Build Tests
AC_ARG_ENABLE(tests,
        AC_HELP_STRING([--enable-tests],
        [Compile Test Programs]))
        
if test "$enable_tests" != "yes"; then
    enable_tests="no"
fi

AM_CONDITIONAL(WITH_TESTS, test "$enable_tests" = "yes")

dnl ****************************************************************************

AC_SUBST(SEAHORSE_CFLAGS)
AC_SUBST(SEAHORSE_LIBS)

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

AC_ARG_ENABLE(update-mime-database,
	AC_HELP_STRING([--disable-update-mime-database],
	[do not run the update-mime-database utility (mostly useful for package maintainers) ]))
AM_CONDITIONAL(UPDATE_MIME_DATABASE, test "$enable_update_mime_database" != "no")

dnl *******************
dnl ***** gettext *****
dnl *******************

GETTEXT_PACKAGE=seahorse-plugins
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Name of the gettext domain.])

AM_GLIB_GNU_GETTEXT

dnl ****************************************************************************

AC_OUTPUT([
Makefile
libseahorse/Makefile
po/Makefile.in
help/Makefile
data/Makefile
pixmaps/Makefile
pixmaps/22x22/Makefile
pixmaps/48x48/Makefile
pixmaps/scalable/Makefile
agent/Makefile
plugins/Makefile
plugins/applet/Makefile
plugins/applet/docs/Makefile
plugins/epiphany/Makefile
plugins/epiphany/mozilla/Makefile
plugins/gedit/Makefile
plugins/nautilus/Makefile
plugins/nautilus/seahorse-pgp-encrypted.desktop.in
plugins/nautilus/seahorse-pgp-keys.desktop.in
plugins/nautilus/seahorse-pgp-signature.desktop.in
plugins/nautilus-ext/Makefile
])

dnl ****************************************************************************
dnl  SUMMARY
dnl ****************************************************************************

echo "
GnuPG Version:           $gnupg_version
GPGME Version:           $gpgme_config_version
Plugins:
  Epiphany:              $with_epiphany_plugin    
  GEdit (v <= 2.12):     $with_gedit_bonobo
  GEdit (v >= 2.14):     $with_gedit_plugin
  Panel Applet:          $with_panel_applet
  Nautilus:              $with_nautilus_ext
  Seahorse Agent:        $enable_agent
Notification Support:    $enable_libnotify
"
